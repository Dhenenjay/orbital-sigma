import { useState, useRef, useEffect } from "react";
import { useAction } from "convex/react";
import { api } from "../convex/_generated/api";

interface Message {
  id: string;
  type: "user" | "assistant" | "error" | "analyzing";
  content: string;
  timestamp: Date;
  data?: any;
  stage?: "parsing" | "gee" | "gpt" | "complete";
  progress?: number;
}

export default function NaturalLanguageChat() {
  const [query, setQuery] = useState("");
  const [messages, setMessages] = useState<Message[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [isExpanded, setIsExpanded] = useState(false);
  const [currentStage, setCurrentStage] = useState<string>("");
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLInputElement>(null);
  
  const startQuery = useAction(api.startQuery.startQuery);

  // Auto-scroll to bottom when new messages arrive
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  // Focus input when expanded
  useEffect(() => {
    if (isExpanded) {
      inputRef.current?.focus();
    }
  }, [isExpanded]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!query.trim() || isLoading) return;
    
    const userQuery = query.trim();
    const userMessage: Message = {
      id: `user-${Date.now()}`,
      type: "user",
      content: userQuery,
      timestamp: new Date(),
    };
    
    setMessages(prev => [...prev, userMessage]);
    setQuery("");
    setIsLoading(true);
    
    // Add analyzing message with stages
    const analyzingMessage: Message = {
      id: `analyzing-${Date.now()}`,
      type: "analyzing",
      content: "Analyzing your query...",
      timestamp: new Date(),
      stage: "parsing",
      progress: 0,
    };
    setMessages(prev => [...prev, analyzingMessage]);
    
    // Simulate stage progression
    const stages = [
      { stage: "parsing", message: "Parsing natural language query...", duration: 800 },
      { stage: "gee", message: "Analyzing satellite imagery with Google Earth Engine...", duration: 2000 },
      { stage: "gpt", message: "Processing with GPT-5 for insights...", duration: 1500 },
      { stage: "complete", message: "Finalizing results...", duration: 500 },
    ];
    
    let stageIndex = 0;
    const updateStage = () => {
      if (stageIndex < stages.length && isLoading) {
        const currentStageInfo = stages[stageIndex];
        setCurrentStage(currentStageInfo.message);
        
        // Update the analyzing message
        setMessages(prev => prev.map(msg => 
          msg.id === analyzingMessage.id 
            ? { ...msg, content: currentStageInfo.message, stage: currentStageInfo.stage as any, progress: (stageIndex + 1) / stages.length * 100 }
            : msg
        ));
        
        stageIndex++;
        if (stageIndex < stages.length) {
          setTimeout(updateStage, currentStageInfo.duration);
        }
      }
    };
    
    // Start stage updates
    setTimeout(updateStage, 100);
    
    try {
      const result = await startQuery({
        query: userQuery,
        useAI: true,
      });
      
      if (result.success) {
        // Remove analyzing message
        setMessages(prev => prev.filter(msg => msg.id !== analyzingMessage.id));
        
        const assistantMessage: Message = {
          id: `assistant-${Date.now()}`,
          type: "assistant",
          content: result.interpretation || result.message || "Query processed successfully",
          timestamp: new Date(),
          data: result,
        };
        setMessages(prev => [...prev, assistantMessage]);
        
        // If we have params, we could display them or trigger additional actions
        if (result.params) {
          console.log("Query parameters:", result.params);
          // You could emit an event or callback here to update the main dashboard
        }
      } else {
        throw new Error(result.error || "Query failed");
      }
    } catch (error) {
      // Remove analyzing message
      setMessages(prev => prev.filter(msg => msg.type !== "analyzing"));
      
      const errorMessage: Message = {
        id: `error-${Date.now()}`,
        type: "error",
        content: error instanceof Error ? error.message : "Failed to process query",
        timestamp: new Date(),
      };
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
      setCurrentStage("");
    }
  };

  const clearChat = () => {
    setMessages([]);
    setQuery("");
  };

  const suggestedQueries = [
    "Show critical port anomalies from the past week",
    "Find mining disruptions in South America",
    "What are the recent energy sector anomalies?",
    "Show high confidence farm anomalies in Asia",
    "List major port congestions today",
  ];

  const handleSuggestion = (suggestion: string) => {
    setQuery(suggestion);
    if (!isExpanded) setIsExpanded(true);
    inputRef.current?.focus();
  };

  return (
    <>
      {/* Minimized chat button */}
      {!isExpanded && (
        <button
          onClick={() => setIsExpanded(true)}
          style={{
            position: "fixed",
            bottom: 24,
            right: 24,
            width: 60,
            height: 60,
            borderRadius: "50%",
            background: "linear-gradient(135deg, #667eea 0%, #764ba2 100%)",
            color: "white",
            border: "none",
            cursor: "pointer",
            display: "flex",
            alignItems: "center",
            justifyContent: "center",
            boxShadow: "0 4px 20px rgba(0,0,0,0.15)",
            transition: "transform 0.2s",
            zIndex: 1000,
          }}
          onMouseEnter={(e) => e.currentTarget.style.transform = "scale(1.1)"}
          onMouseLeave={(e) => e.currentTarget.style.transform = "scale(1)"}
        >
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
            <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z" />
          </svg>
        </button>
      )}

      {/* Expanded chat interface */}
      {isExpanded && (
        <div
          style={{
            position: "fixed",
            bottom: 24,
            right: 24,
            width: 420,
            height: 600,
            background: "white",
            borderRadius: 16,
            boxShadow: "0 10px 40px rgba(0,0,0,0.2)",
            display: "flex",
            flexDirection: "column",
            zIndex: 1000,
            border: "1px solid #e5e7eb",
          }}
        >
          {/* Header */}
          <div
            style={{
              padding: 16,
              borderBottom: "1px solid #e5e7eb",
              background: "linear-gradient(135deg, #667eea 0%, #764ba2 100%)",
              borderRadius: "16px 16px 0 0",
              color: "white",
              display: "flex",
              justifyContent: "space-between",
              alignItems: "center",
            }}
          >
            <div>
              <h3 style={{ margin: 0, fontSize: 18 }}>Anomaly Query Assistant</h3>
              <p style={{ margin: "4px 0 0", fontSize: 12, opacity: 0.9 }}>
                Ask questions in natural language
              </p>
            </div>
            <div style={{ display: "flex", gap: 8 }}>
              <button
                onClick={clearChat}
                style={{
                  background: "rgba(255,255,255,0.2)",
                  border: "none",
                  color: "white",
                  padding: "6px 10px",
                  borderRadius: 6,
                  cursor: "pointer",
                  fontSize: 12,
                }}
                title="Clear chat"
              >
                Clear
              </button>
              <button
                onClick={() => setIsExpanded(false)}
                style={{
                  background: "transparent",
                  border: "none",
                  color: "white",
                  cursor: "pointer",
                  padding: 4,
                }}
                title="Minimize"
              >
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                  <line x1="18" y1="6" x2="6" y2="18" />
                  <line x1="6" y1="6" x2="18" y2="18" />
                </svg>
              </button>
            </div>
          </div>

          {/* Messages area */}
          <div
            style={{
              flex: 1,
              overflowY: "auto",
              padding: 16,
              display: "flex",
              flexDirection: "column",
              gap: 12,
            }}
          >
            {messages.length === 0 ? (
              <div style={{ color: "#6b7280", fontSize: 14 }}>
                <p style={{ marginBottom: 16 }}>
                  Ask me about satellite anomalies! Try questions like:
                </p>
                <div style={{ display: "flex", flexDirection: "column", gap: 8 }}>
                  {suggestedQueries.map((suggestion, i) => (
                    <button
                      key={i}
                      onClick={() => handleSuggestion(suggestion)}
                      style={{
                        background: "#f3f4f6",
                        border: "1px solid #e5e7eb",
                        borderRadius: 8,
                        padding: "8px 12px",
                        textAlign: "left",
                        cursor: "pointer",
                        fontSize: 13,
                        transition: "background 0.2s",
                      }}
                      onMouseEnter={(e) => e.currentTarget.style.background = "#e5e7eb"}
                      onMouseLeave={(e) => e.currentTarget.style.background = "#f3f4f6"}
                    >
                      "{suggestion}"
                    </button>
                  ))}
                </div>
              </div>
            ) : (
              messages.map((message) => {
                // Special rendering for analyzing message
                if (message.type === "analyzing") {
                  return (
                    <div key={message.id} style={{ display: "flex", justifyContent: "flex-start" }}>
                      <div
                        style={{
                          maxWidth: "85%",
                          padding: "12px 16px",
                          borderRadius: 12,
                          background: "linear-gradient(135deg, #f3f4f6 0%, #e5e7eb 100%)",
                          border: "1px solid #d1d5db",
                          fontSize: 14,
                        }}
                      >
                        <div style={{ display: "flex", alignItems: "center", gap: 12 }}>
                          <div
                            className="spinner"
                            style={{
                              width: 24,
                              height: 24,
                              border: "3px solid #e5e7eb",
                              borderTop: "3px solid #667eea",
                              borderRadius: "50%",
                              animation: "spin 1s linear infinite",
                            }}
                          />
                          <div style={{ flex: 1 }}>
                            <div style={{ color: "#1f2937", fontWeight: 500 }}>
                              {message.content}
                            </div>
                            {message.progress !== undefined && (
                              <div style={{ marginTop: 8 }}>
                                <div
                                  style={{
                                    height: 4,
                                    background: "#e5e7eb",
                                    borderRadius: 2,
                                    overflow: "hidden",
                                  }}
                                >
                                  <div
                                    style={{
                                      height: "100%",
                                      width: `${message.progress}%`,
                                      background: "linear-gradient(90deg, #667eea 0%, #764ba2 100%)",
                                      transition: "width 0.5s ease",
                                    }}
                                  />
                                </div>
                                <div style={{ marginTop: 4, fontSize: 11, color: "#6b7280" }}>
                                  {message.stage === "parsing" && "🔍 Parsing query..."}
                                  {message.stage === "gee" && "🛰️ Analyzing satellite data..."}
                                  {message.stage === "gpt" && "🤖 Processing with AI..."}
                                  {message.stage === "complete" && "✨ Finalizing..."}
                                </div>
                              </div>
                            )}
                          </div>
                        </div>
                      </div>
                    </div>
                  );
                }
                
                // Regular message rendering
                return (
                  <div
                    key={message.id}
                    style={{
                      display: "flex",
                      justifyContent: message.type === "user" ? "flex-end" : "flex-start",
                    }}
                  >
                    <div
                      style={{
                        maxWidth: "80%",
                        padding: "10px 14px",
                        borderRadius: 12,
                        background:
                          message.type === "user"
                            ? "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
                            : message.type === "error"
                            ? "#fee2e2"
                            : "#f3f4f6",
                        color: message.type === "user" ? "white" : message.type === "error" ? "#dc2626" : "#1f2937",
                        fontSize: 14,
                        lineHeight: 1.5,
                      }}
                    >
                      <div>{message.content}</div>
                      {message.data?.params && (
                        <details style={{ marginTop: 8, fontSize: 12, opacity: 0.9 }}>
                          <summary style={{ cursor: "pointer" }}>View parameters</summary>
                          <pre style={{ 
                            marginTop: 8, 
                            padding: 8, 
                            background: "rgba(0,0,0,0.1)", 
                            borderRadius: 4,
                            overflowX: "auto",
                            whiteSpace: "pre-wrap",
                            wordBreak: "break-word",
                          }}>
                            {JSON.stringify(message.data.params, null, 2)}
                          </pre>
                        </details>
                      )}
                      <div style={{ fontSize: 11, opacity: 0.7, marginTop: 4 }}>
                        {message.timestamp.toLocaleTimeString()}
                      </div>
                    </div>
                  </div>
                );
              })
            )}
            <div ref={messagesEndRef} />
          </div>

          {/* Input form */}
          <form
            onSubmit={handleSubmit}
            style={{
              padding: 16,
              borderTop: "1px solid #e5e7eb",
              display: "flex",
              gap: 8,
            }}
          >
            <input
              ref={inputRef}
              type="text"
              value={query}
              onChange={(e) => setQuery(e.target.value)}
              placeholder="Ask about anomalies..."
              disabled={isLoading}
              style={{
                flex: 1,
                padding: "10px 14px",
                border: "1px solid #d1d5db",
                borderRadius: 8,
                fontSize: 14,
                outline: "none",
              }}
              onFocus={(e) => e.currentTarget.style.borderColor = "#667eea"}
              onBlur={(e) => e.currentTarget.style.borderColor = "#d1d5db"}
            />
            <button
              type="submit"
              disabled={!query.trim() || isLoading}
              style={{
                padding: "10px 20px",
                background: !query.trim() || isLoading ? "#9ca3af" : "linear-gradient(135deg, #667eea 0%, #764ba2 100%)",
                color: "white",
                border: "none",
                borderRadius: 8,
                cursor: !query.trim() || isLoading ? "not-allowed" : "pointer",
                fontSize: 14,
                fontWeight: 500,
                transition: "opacity 0.2s",
              }}
            >
              {isLoading ? "..." : "Send"}
            </button>
          </form>
        </div>
      )}

      {/* Loading animation styles */}
      <style jsx>{`
        @keyframes spin {
          0% { transform: rotate(0deg); }
          100% { transform: rotate(360deg); }
        }
        
        @keyframes pulse {
          0%, 100% { opacity: 1; }
          50% { opacity: 0.5; }
        }
        
        @keyframes slideIn {
          from { transform: translateX(-10px); opacity: 0; }
          to { transform: translateX(0); opacity: 1; }
        }
        
        .spinner {
          animation: spin 1s linear infinite;
        }
      `}</style>
    </>
  );
}
