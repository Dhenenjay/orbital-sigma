import { useEffect, useRef, useState } from 'react';
import { useRouter } from 'next/router';
import { useUser, SignInButton } from '@clerk/nextjs';
import anime from 'animejs/lib/anime.es.js';
import Link from 'next/link';

export default function LandingPage() {
  const router = useRouter();
  const { isSignedIn, isLoaded } = useUser();
  const [hoveredQuestion, setHoveredQuestion] = useState<number | null>(null);
  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });
  
  // Refs for animations
  const heroRef = useRef<HTMLDivElement>(null);
  const satelliteRef = useRef<HTMLDivElement>(null);
  const gridRef = useRef<HTMLDivElement>(null);
  const questionsRef = useRef<HTMLDivElement>(null);
  const globeRef = useRef<HTMLCanvasElement>(null);

  // Redirect if already signed in
  useEffect(() => {
    if (isLoaded && isSignedIn) {
      router.push('/dashboard-pro');
    }
  }, [isSignedIn, isLoaded, router]);

  // Track mouse position for parallax effects
  useEffect(() => {
    const handleMouseMove = (e: MouseEvent) => {
      setMousePosition({ x: e.clientX, y: e.clientY });
    };
    window.addEventListener('mousemove', handleMouseMove);
    return () => window.removeEventListener('mousemove', handleMouseMove);
  }, []);

  // Initial animations
  useEffect(() => {
    // Hero text animation
    anime({
      targets: '.hero-text',
      translateY: [50, 0],
      opacity: [0, 1],
      duration: 1200,
      delay: anime.stagger(200),
      easing: 'easeOutCubic'
    });

    // Floating satellite animation
    anime({
      targets: '.satellite',
      translateY: [-20, 20],
      rotate: [0, 5],
      duration: 4000,
      loop: true,
      direction: 'alternate',
      easing: 'easeInOutSine'
    });

    // Grid animation
    anime({
      targets: '.grid-line',
      opacity: [0, 0.1],
      duration: 2000,
      delay: anime.stagger(50, { grid: [20, 20], from: 'center' }),
      easing: 'easeInOutQuad'
    });

    // Pulse animation for dots
    anime({
      targets: '.pulse-dot',
      scale: [1, 1.5],
      opacity: [1, 0],
      duration: 2000,
      loop: true,
      delay: anime.stagger(500),
      easing: 'easeOutCubic'
    });

    // Question cards hover effect initialization
    anime({
      targets: '.question-card',
      translateY: [20, 0],
      opacity: [0, 1],
      duration: 800,
      delay: anime.stagger(100, { start: 500 }),
      easing: 'easeOutCubic'
    });

    // Globe rotation animation
    if (globeRef.current) {
      const canvas = globeRef.current;
      const ctx = canvas.getContext('2d');
      if (ctx) {
        // Simple rotating globe effect
        let rotation = 0;
        const drawGlobe = () => {
          ctx.clearRect(0, 0, canvas.width, canvas.height);
          
          // Draw rotating meridians
          ctx.strokeStyle = 'rgba(99, 102, 241, 0.2)';
          ctx.lineWidth = 1;
          
          for (let i = 0; i < 8; i++) {
            ctx.beginPath();
            const x = canvas.width / 2 + Math.cos(rotation + i * Math.PI / 4) * 80;
            ctx.moveTo(x, 20);
            ctx.quadraticCurveTo(
              canvas.width / 2,
              canvas.height / 2,
              x,
              canvas.height - 20
            );
            ctx.stroke();
          }
          
          rotation += 0.01;
          requestAnimationFrame(drawGlobe);
        };
        drawGlobe();
      }
    }
  }, []);

  // Parallax effect for satellite
  useEffect(() => {
    if (satelliteRef.current) {
      const x = (mousePosition.x - window.innerWidth / 2) * 0.02;
      const y = (mousePosition.y - window.innerHeight / 2) * 0.02;
      satelliteRef.current.style.transform = `translate(${x}px, ${y}px) rotate(5deg)`;
    }
  }, [mousePosition]);

  const sampleQuestions = [
    {
      icon: "üåæ",
      text: "Where did soy fields in Brazil change most this month and what's the impact on futures?",
      color: "from-green-500 to-emerald-600"
    },
    {
      icon: "üö¢",
      text: "Is port congestion in Asia likely to hit US retail stocks next week?",
      color: "from-blue-500 to-cyan-600"
    },
    {
      icon: "‚õèÔ∏è",
      text: "Any copper mine activity that could move HG in the next 2-4 weeks?",
      color: "from-orange-500 to-red-600"
    }
  ];

  const handleQuestionHover = (index: number) => {
    setHoveredQuestion(index);
    anime({
      targets: `.question-${index}`,
      scale: 1.05,
      duration: 300,
      easing: 'easeOutCubic'
    });
  };

  const handleQuestionLeave = (index: number) => {
    setHoveredQuestion(null);
    anime({
      targets: `.question-${index}`,
      scale: 1,
      duration: 300,
      easing: 'easeOutCubic'
    });
  };

  return (
    <div className="min-h-screen bg-black text-white overflow-hidden relative">
      {/* Animated Background Grid */}
      <div className="absolute inset-0 opacity-20" ref={gridRef}>
        <div className="absolute inset-0" 
          style={{
            backgroundImage: `
              linear-gradient(rgba(99, 102, 241, 0.1) 1px, transparent 1px),
              linear-gradient(90deg, rgba(99, 102, 241, 0.1) 1px, transparent 1px)
            `,
            backgroundSize: '50px 50px',
            animation: 'grid-move 20s linear infinite'
          }}
        />
      </div>

      {/* Floating Particles */}
      <div className="absolute inset-0 pointer-events-none">
        {[...Array(20)].map((_, i) => (
          <div
            key={i}
            className="absolute w-1 h-1 bg-indigo-400 rounded-full opacity-50"
            style={{
              left: `${Math.random() * 100}%`,
              top: `${Math.random() * 100}%`,
              animation: `float ${10 + Math.random() * 20}s linear infinite`
            }}
          />
        ))}
      </div>

      {/* Animated Globe Canvas */}
      <canvas 
        ref={globeRef}
        className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 opacity-10"
        width={200}
        height={200}
      />

      {/* Main Content */}
      <div className="relative z-10 max-w-7xl mx-auto px-6 sm:px-8 lg:px-12">
        {/* Navigation */}
        <nav className="flex items-center justify-between py-8">
          <div className="flex items-center space-x-3">
            <div className="relative">
              <div className="w-12 h-12 bg-gradient-to-br from-indigo-500 to-purple-600 rounded-xl flex items-center justify-center shadow-lg shadow-indigo-500/30">
                <span className="text-2xl">üõ∞Ô∏è</span>
              </div>
              <div className="absolute -top-1 -right-1 w-3 h-3 bg-green-500 rounded-full animate-pulse" />
            </div>
            <div>
              <div className="text-xl font-bold bg-gradient-to-r from-white to-gray-400 bg-clip-text text-transparent">
                Orbital Sigma
              </div>
              <div className="text-xs text-gray-500 uppercase tracking-wider">Intelligence Platform</div>
            </div>
          </div>
          
          <div className="flex items-center space-x-6">
            <Link href="/pricing" className="text-gray-400 hover:text-white transition-colors text-sm">
              Pricing
            </Link>
            <Link href="/docs" className="text-gray-400 hover:text-white transition-colors text-sm">
              Docs
            </Link>
            <SignInButton mode="modal">
              <button className="text-gray-400 hover:text-white transition-colors text-sm">
                Sign In
              </button>
            </SignInButton>
          </div>
        </nav>

        {/* Hero Section */}
        <div className="mt-20 mb-16 text-center relative" ref={heroRef}>
          {/* Floating Satellite Icon */}
          <div 
            ref={satelliteRef}
            className="satellite absolute -top-10 right-10 w-24 h-24 opacity-20"
          >
            <div className="relative w-full h-full">
              <div className="absolute inset-0 bg-gradient-to-br from-indigo-500 to-purple-600 rounded-full blur-2xl" />
              <span className="absolute inset-0 flex items-center justify-center text-4xl">üõ∞Ô∏è</span>
            </div>
          </div>

          {/* Main Headline */}
          <h1 className="hero-text text-5xl sm:text-6xl lg:text-7xl font-bold mb-6 leading-tight">
            <span className="bg-gradient-to-r from-white via-gray-200 to-gray-400 bg-clip-text text-transparent">
              The Virtual Satellite for
            </span>
            <br />
            <span className="bg-gradient-to-r from-indigo-400 via-purple-400 to-pink-400 bg-clip-text text-transparent">
              Market Alpha
            </span>
          </h1>

          {/* Subheadline */}
          <p className="hero-text text-xl sm:text-2xl text-gray-400 mb-12 max-w-3xl mx-auto leading-relaxed">
            Ask in plain English. We scan the planet, explain what changed,
            <br />
            and turn it into trade-ready signals.
          </p>

          {/* CTA Buttons */}
          <div className="hero-text flex flex-col sm:flex-row items-center justify-center space-y-4 sm:space-y-0 sm:space-x-6">
            <button
              onClick={() => router.push('/demo')}
              className="group relative px-8 py-4 bg-gradient-to-r from-indigo-600 to-purple-600 rounded-xl font-semibold text-lg shadow-xl shadow-indigo-500/25 hover:shadow-2xl hover:shadow-indigo-500/40 transform hover:scale-105 transition-all duration-300"
            >
              <span className="relative z-10">Try a Demo</span>
              <div className="absolute inset-0 bg-gradient-to-r from-indigo-600 to-purple-600 rounded-xl blur-xl opacity-50 group-hover:opacity-75 transition-opacity" />
            </button>

            <SignInButton mode="modal">
              <button className="group px-8 py-4 bg-gray-900 border border-gray-800 rounded-xl font-semibold text-lg hover:bg-gray-800 hover:border-gray-700 transform hover:scale-105 transition-all duration-300">
                <span className="flex items-center space-x-2">
                  <span>Sign in to Start</span>
                  <svg className="w-5 h-5 group-hover:translate-x-1 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 7l5 5m0 0l-5 5m5-5H6" />
                  </svg>
                </span>
              </button>
            </SignInButton>
          </div>

          {/* Live Status Badge */}
          <div className="hero-text mt-8 inline-flex items-center space-x-2 px-4 py-2 bg-gray-900/50 backdrop-blur-sm border border-gray-800 rounded-full">
            <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse" />
            <span className="text-xs text-gray-400">
              Last Earth scan: {new Date().toLocaleString('en-US', { 
                month: 'short', 
                day: 'numeric', 
                year: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
              })} UTC
            </span>
          </div>
        </div>

        {/* Sample Questions Section */}
        <div className="mb-20" ref={questionsRef}>
          <p className="text-center text-sm text-gray-500 mb-8 uppercase tracking-wider">
            Sample Intelligence Queries
          </p>
          
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6 max-w-5xl mx-auto">
            {sampleQuestions.map((question, index) => (
              <div
                key={index}
                className={`question-card question-${index} relative group cursor-pointer`}
                onMouseEnter={() => handleQuestionHover(index)}
                onMouseLeave={() => handleQuestionLeave(index)}
                onClick={() => router.push('/demo')}
              >
                <div className="relative p-6 bg-gray-900/50 backdrop-blur-sm border border-gray-800 rounded-xl hover:border-gray-700 transition-all duration-300">
                  {/* Gradient overlay on hover */}
                  <div className={`absolute inset-0 bg-gradient-to-br ${question.color} opacity-0 group-hover:opacity-10 rounded-xl transition-opacity duration-300`} />
                  
                  {/* Icon */}
                  <div className="text-3xl mb-4">{question.icon}</div>
                  
                  {/* Question text */}
                  <p className="text-sm text-gray-300 leading-relaxed relative z-10">
                    {question.text}
                  </p>
                  
                  {/* Hover indicator */}
                  <div className="mt-4 flex items-center space-x-2 text-xs text-gray-500 group-hover:text-indigo-400 transition-colors">
                    <span>Try this query</span>
                    <svg className="w-4 h-4 group-hover:translate-x-1 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                    </svg>
                  </div>

                  {/* Animated border gradient */}
                  <div className="absolute inset-0 rounded-xl overflow-hidden pointer-events-none">
                    <div className={`absolute inset-0 bg-gradient-to-r ${question.color} opacity-0 group-hover:opacity-20 blur-xl transition-opacity duration-500`} />
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Features Grid */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-8 mb-20">
          {[
            {
              icon: "üåç",
              title: "Global Coverage",
              description: "Real-time satellite analysis across every commodity zone"
            },
            {
              icon: "ü§ñ",
              title: "GPT-5 Powered",
              description: "Natural language to actionable trading signals"
            },
            {
              icon: "‚ö°",
              title: "Instant Signals",
              description: "From question to trade thesis in seconds"
            }
          ].map((feature, index) => (
            <div
              key={index}
              className="text-center group"
              style={{
                animation: `fadeInUp 0.8s ease-out ${index * 0.2}s both`
              }}
            >
              <div className="inline-block p-4 bg-gray-900/50 backdrop-blur-sm border border-gray-800 rounded-2xl group-hover:border-gray-700 transition-all duration-300">
                <span className="text-4xl">{feature.icon}</span>
              </div>
              <h3 className="mt-4 text-lg font-semibold text-white">{feature.title}</h3>
              <p className="mt-2 text-sm text-gray-400">{feature.description}</p>
            </div>
          ))}
        </div>

        {/* Footer */}
        <footer className="py-8 border-t border-gray-900">
          <div className="flex items-center justify-between">
            <p className="text-xs text-gray-500">
              ¬© 2025 Orbital Sigma. Not investment advice.
            </p>
            <div className="flex items-center space-x-6">
              <Link href="/terms" className="text-xs text-gray-500 hover:text-gray-400 transition-colors">
                Terms
              </Link>
              <Link href="/privacy" className="text-xs text-gray-500 hover:text-gray-400 transition-colors">
                Privacy
              </Link>
              <Link href="/contact" className="text-xs text-gray-500 hover:text-gray-400 transition-colors">
                Contact
              </Link>
            </div>
          </div>
        </footer>
      </div>

      {/* Animated gradient orbs */}
      <div className="absolute top-1/4 left-1/4 w-96 h-96 bg-indigo-600 rounded-full filter blur-[128px] opacity-20 animate-pulse" />
      <div className="absolute bottom-1/4 right-1/4 w-96 h-96 bg-purple-600 rounded-full filter blur-[128px] opacity-20 animate-pulse" style={{ animationDelay: '2s' }} />

      <style jsx>{`
        @keyframes float {
          0% { transform: translateY(0px) translateX(0px); }
          33% { transform: translateY(-30px) translateX(10px); }
          66% { transform: translateY(30px) translateX(-10px); }
          100% { transform: translateY(0px) translateX(0px); }
        }

        @keyframes grid-move {
          0% { transform: translate(0, 0); }
          100% { transform: translate(50px, 50px); }
        }

        @keyframes fadeInUp {
          0% {
            opacity: 0;
            transform: translateY(30px);
          }
          100% {
            opacity: 1;
            transform: translateY(0);
          }
        }
      `}</style>
    </div>
  );
}
